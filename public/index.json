[
{
	"uri": "//localhost:1313/6-cloudfront-deployment/6.1-configure-s3-origin/",
	"title": "Create Distribution",
	"tags": [],
	"description": "",
	"content": "Create S3 Bucket Access S3: Search keyword: s3 Select S3 service Within S3 interface: Select Buckets Click Create bucket Within Create bucket interface: AWS Region: Asia Pacific (Singapore) ap-southeast-1 Bucket name: Enter the name you want to set (e.g. fcj-todo-bucket-1) Click Create Create CloudFront Distribution Access CloudFront: Search keyword: cloudfront Select CloudFront Within CloudFront interface: Select Distribution Click Create distribution Within Create distribution interface: Origin domain: Select the S3 bucket you just created Name: todo-app-frontend Origin access: Origin access control settings (recommended) Click Create new OAC Leave all configurations as default then Create Web Application Firewall: Do not enable security protections Price class: Use North America, Europe, Asia, Middle East, and Africa Default root object: index.html Click Create distribution Update S3 bucket policy: After creating the distribution, you will see a yellow message asking to update the S3 bucket policy. Click the Copy policy button Go back to the S3 bucket and select the Permissions tab Click Edit in the Bucket policy section Paste the copied policy content into the Policy section and save it "
},
{
	"uri": "//localhost:1313/5-ecs-service-deployment/5.1-setup-ecr/",
	"title": "Create ECR Repository",
	"tags": [],
	"description": "",
	"content": "Please download the source code below and extract it to prepare for the next steps:\nSource code\rsimple-todo-app.zip\r(445 KB)\rCreate ECR Repository Access ECR:\nSearch keyword: ecr Select Elastic Container Registry Within Amazon Elastic Container Registry interface:\nSelect Repositories Click Create Registry Within Create Registry interface:\nVisibility settings: Public Registry name: todo Push Docker image to ECR:\nSelect Repositories in the Public registry section Select repository todo then click View push commands In the simple-todo-app folder run the following command: cd backend Run commands on the ECR interface one by one. Make sure Docker on your computer is turned on before running these commands.\nAfter running these commands, we will have a Docker image on the ECR repository as shown in the image: Check Docker image:\nWithin the ECR interface, select Repositories under the Public registry section and then select todo Click the Copy URI button to copy the address of this image. Save this address because we will need it in the next steps. "
},
{
	"uri": "//localhost:1313/7-route53/7.1-setup-hosted-zone/",
	"title": "Create Hosted Zone",
	"tags": [],
	"description": "",
	"content": "Create Hosted Zone Access Route 53:\nSearch keyword: route 53 Select Route 53 service Within Route 53 interface:\nSelect Hosted zones Click Create hosted zone Within Create hosted zone interface:\nDomain name: Enter your domain Type: Public hosted zone Click Create hosted zone Configure name servers: To integrate your domain with Route 53, you need to point DNS records with type NS to AWS name servers. You can do this by visiting your domain provider\u0026rsquo;s DNS management page.\nConfiguration example: Check the name servers configuration: Name server configuration may take time to update. Wait a few minutes before performing the steps below.\nAccess this URL: DNS Checker Select tab: DNS Lookup In the Enter any Valid URL section: Enter your domain address (e.g. yourdomain.com) Record type: NS Click Lookup DNS Result when you successfully configure: "
},
{
	"uri": "//localhost:1313/4-database-deployment/4.1-subnet-group/",
	"title": "Create Subnet Group",
	"tags": [],
	"description": "",
	"content": "Create Subnet Group A DB subnet group defines which subnets in a virtual private cloud (VPC) are designated for your database.\nA DB subnet group has subnets in at least two Availability Zones in its AWS Region. The subnets in a DB subnet group are either public or private, depending on the configuration of their network ACLs and routing tables.\nFor security, the subnets in a DB subnet group are typically private. If the database must be publicly accessible, all of the subnets in its DB subnet group must be public.\nWithin AWS Management Console interface: Search keyword RDS Select RDS Within Amazon RDS interface: Select Subnet groups Click on Create DB subnet group Within Create DB subnet group interface: Name: todo-db-subnet-group Description: Subnet group for todo DB VPC: todo-vpc Under Add subnets section: Select availability zone: ap-southeast-1a and ap-southeast-1b Subnets: private-subnet-az-1 (10.0.1.0/24) and private-subnet-az-2 (10.0.3.0/24) Click on Create "
},
{
	"uri": "//localhost:1313/3-networking-security/3.1-vpc/",
	"title": "Create VPC",
	"tags": [],
	"description": "",
	"content": "Create VPC Within the AWS Management Console interface:\nSearch keyword VPC Select VPC Within the VPC interface:\nSelect Your VPCs Click on Create VPC Configuration fields:\nResource: VPC only Name tag: todo-vpc IPv4 CIDR: 10.0.0.0/16 Keep the remaining configurations as default and then click on Create VPC After your VPC become available:\nSelect Actions Click on Edit VPC settings Check the checkbox Enable DNS hostname Click on Save "
},
{
	"uri": "//localhost:1313/",
	"title": "Deploy Scalable Website with CloudFront, ECS Fargate",
	"tags": [],
	"description": "",
	"content": "Deploy Scalable Website with CloudFront, ECS Fargate Overview In this lab, we will deploy a simple web application to AWS using services such as CloudFront, Elastic Container Service (ECS), Amazon RDS, Route53. Websites deployed this way increase availability and scalability without having to manage any physical servers.\nArchitecture Diagram Content Introduction Preparation Networking and Security Database Deployment ECS Service Deployment CloudFront Deployment Route53 Configuration Clean Up "
},
{
	"uri": "//localhost:1313/1-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "In this lab, we will use the following AWS services\nVirtual Private Cloud (VPC) Amazon Virtual Private Cloud (Amazon VPC) is a Virtual Private Cloud—a customized virtual network hosted within the AWS Cloud and isolated from the external world. This concept resembles the design and implementation of a distinct standalone network environment in an on-premise data center, a practice still widely employed across many countries.\nWithin this dedicated VPC, users possess comprehensive control over their virtual network environment. This control encompasses the initiation and operation of AWS resources, the ability to choose IP address ranges, establish network subnets, and configure routing tables and network gateways. Secure and convenient resource and application access within the VPC is facilitated through both IPv4 and IPv6 protocols.\nAmazon Relational Database Service (Amazon RDS) Amazon RDS is an easy to manage relational database service optimized for total cost of ownership. It is simple to set up, operate, and scale with demand. Amazon RDS automates the undifferentiated database management tasks, such as provisioning, configuring, backups, and patching. Amazon RDS enables customers to create a new database in minutes, and offers flexibility to customize databases to meet their needs. Customers can optimize performance with features, like Multi-AZ with two readable standbys, Optimized Writes and Reads, and choose from multiple pricing options to effectively manage costs.\nParameter Store Parameter Store is a capability of AWS Systems Manager, provides secure, hierarchical storage for configuration data management and secrets management. You can store data such as passwords, database connection strings,\u0026hellip; as plain text or encrypted data. You can reference Systems Manager parameters in your scripts, commands, and configuration by Amazon Resource Name (ARN) of them.\nAmazon Elastic Container Registry (ECR) Amazon Elastic Container Registry (Amazon ECR) is an AWS managed container image registry service that is secure, scalable, and reliable. Amazon ECR supports private repositories with resource-based permissions using AWS IAM. This is so that specified users or Amazon EC2 instances can access your container repositories and images. ECR allows users to use CLI to manage, pull, push Docker images.\nAmazon Elastic Container Service (ECS) Amazon Elastic Container Service (Amazon ECS) is a fully managed container orchestration service that helps you easily deploy, manage, and scale containerized applications. As a fully managed service, Amazon ECS comes with AWS configuration and operational best practices built-in. It\u0026rsquo;s integrated with both AWS and third-party tools, such as Amazon Elastic Container Registry and Docker. This integration makes it easier for teams to focus on building the applications, not the environment. You can run and scale your container workloads across AWS Regions in the cloud, and on-premises, without the complexity of managing a control plane.\nAmazon CloudWatch CloudWatch monitors resources and applications on AWS by collecting metrics over time. The service provides built-in dashboards for core services and allows users to create custom dashboards to visualize selected metrics. CloudWatch can integrate with many other services very easily. One of the most popular uses of CloudWatch is collecting application logs.\nElastic Load Balancing Elastic Load Balancing automatically distributes income traffic to various targets, such as EC2 virtual machines, containers, or IP addresses in one or more availability zones. It monitors the access status of registered targets and only routes traffic to active targets. That\u0026rsquo;s how load balancing can help the system know when to expand, reducing the amount of resources needed based on actual traffic.\nAmazon Simple Storage Service (S3) Amazon Simple Storage Service (Amazon S3) is an object storage service that offers industry-leading scalability, data availability, security, and performance. Customers of all sizes and industries can use Amazon S3 to store and protect any amount of data for a range of use cases, such as data lakes, websites, mobile applications, backup and restore, archive, enterprise applications, IoT devices, and big data analytics.\nAmazon CloudFront Amazon CloudFront is a web service that speeds up distribution of your static and dynamic web content, such as HTML, CSS Javascript, and image files, to your users. CloudFront speeds up web content delivery by:\nUsing a global network of edge locations to serve content closer to users, reducing latency. Caching content at edge locations, so it\u0026rsquo;s readily available for users without needing to go back to the origin server every time. Routing user requests through the AWS backbone for faster delivery. This results in lower latency, higher data transfer rates, and improved reliability for your users.\nAmazon Route 53 Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service. You can use Route 53 to perform three main functions in any combination: domain registration, DNS routing, and health checking. Route 53 can integrate with many other AWS services, making deployment and configuration of web application domains very easy.\nAWS Certificate Manager (ACM) AWS Certificate Manager (ACM) handles the complexity of creating, storing, and renewing public and private SSL/TLS X.509 certificates and keys that protect your AWS websites and applications. SSL/TLS certificates enable web application servers to communicate with users via the HTTPS protocol, which is more secure than the HTTP protocol. Some modern browsers have decided that a web application is not secure enough if the server does not support the HTTPS protocol and now warn users if they visit those websites. You can provide certificates for your integrated AWS services either by issuing them directly with ACM or by importing third-party certificates into the ACM management system. ACM certificates can secure singular domain names, multiple specific domain names, wildcard domains, or combinations of these. ACM wildcard certificates can protect an unlimited number of subdomains.\n"
},
{
	"uri": "//localhost:1313/7-route53/7.2-cname-cloudfront/",
	"title": "Alternate Domain Name",
	"tags": [],
	"description": "",
	"content": "To configure a domain name for CloudFront distribution, we need to have an SSL/TLS certificate attached to that domain name first. We can create this certificate using the Amazon Certificate Manager (ACM) service.\nConfigure CloudFront Alternate Domain Name Request SSL/TLS certificate by ACM:\nView your CloudFront distribution details At the General tab, click Edit Within Edit settings interface:\nCustom SSL certificate: Request certificate Within Request certificate interface:\nClick Next Within Request public certificate interface: Fully qualified domain name: Enter the domain name you want to choose for the Todo application. e.g. todo.yourdomain.com Click Request Create Route 53 DNS record:\nView your certificate details at List certificates page Click Create records in Route 53 Click Create records Wait a moment until your certificate has status: Issued Configure CloudFront alternate domain name:\nReturn to the Edit settings interface of CloudFront distribution Custom SSL certificate section: Click the reload icon Select the certificate you just created Alternate domain name (CNAME) section: Click Add item Enter the domain name associated with your certificate Scroll down and Click Save changes Return to the Route 53 hosted zone interface and Click Create record then configure: Record name: Enter the subdomain associated with your certificate (e.g. todo) Enable Alias Route traffic to: Alias to CloudFront distribution Select your CloudFront distribution Click Create records After creating this record, you have successfully configured the domain name for CloudFront distribution. When accessing the domain name you just configured, you will see the Todo website interface as shown in the image below: "
},
{
	"uri": "//localhost:1313/4-database-deployment/4.2-aurora/",
	"title": "Create Database",
	"tags": [],
	"description": "",
	"content": "Create Database Within Amazon RDS interface:\nSelect Databases Click on Create database Within Create database interface, configure as below:\nCreation method: Standard create Engine options: Aurora (MySQL Compatible) Engine Version: Aurora MySQL 3.04.1 Templates: Dev/Test DB cluster identifier: todo-db Credentials Settings: Master password: Đặt mật khẩu cho database của bạn (VD: password) Instance configuration: DB instance class: Burstable classes (includes t classes) DB type: db.t3.medium Availability \u0026amp; durability: Create an Aurora Replica or Reader node in a different AZ (recommended for scaled availability) Connectivity: VPC: todo-vpc DB subnet group: todo-db-subnet-group Public access: No VPC security group: Select Choose existing Select todo-db-sg After configuring the above parameters, click Create database.\nWhen the database is successfully created, the interface will look like the image below: "
},
{
	"uri": "//localhost:1313/5-ecs-service-deployment/5.2-iam-role/",
	"title": "Create IAM Role",
	"tags": [],
	"description": "",
	"content": "Create IAM Role Access IAM: Search keyword: iam Select IAM service Within IAM interface: Select Roles Select Create role Within Create role interface: Select type AWS service Search keyword: elastic Select Elastic Container Service Select use case Elastic Container Service Task Click Next In step 2 (Add permissions) search for AmazonRDSDataFullAccess and select this policy Click Next Step 3: Role name: todo-ecs-task-role Description: Allow RDS access to ECS tasks Click Create role "
},
{
	"uri": "//localhost:1313/3-networking-security/3.2-subnets/",
	"title": "Create Subnets",
	"tags": [],
	"description": "",
	"content": "Create Subnets Within VPC interface:\nSelect Subnets Click on Create subnet Within Create subnet interface:\nSelect todo-vpc VPC Create 4 subnets at the same time with configuration as shown in the following table: Subnet name Availability zone IPv4 CIDR block public-subnet-az-1 ap-southeast-1a 10.0.0.0/24 private-subnet-az-1 ap-southeast-1a 10.0.1.0/24 public-subnet-az-2 ap-southeast-1b 10.0.2.0/24 private-subnet-az-2 ap-southeast-1b 10.0.3.0/24 After creating, we will have subnets as shown in the following image: Configure to automatically allocate public IPv4 addresses to 2 public subnets Within VPC interface: Select Subnets Select public-subnet-az-1 Select Actions Select Edit subnet settings Under Auto-assign IP settings section: Select Enable auto-assign public IPv4 address Click on Save Repeat the same process with public-subnet-az-2 Check if the public subnets are configured correctly "
},
{
	"uri": "//localhost:1313/2-preparation/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "Preparation AWS CLI is a command line interface tool that helps users interact with AWS services. In this section we will install and configure the AWS CLI on our computer.\nInstall AWS CLI Access this address to install the AWS CLI that is appropriate for your operating system: Install AWS CLI\nConfigure AWS CLI Create AWS access key\nAccess IAM service Select Users in the sidebar Select current user Scroll down to the Access keys section and select Create access key Select the use case as Command Line Interface (CLI) and select Next Leave the remaining configurations as default and then create an access key. After creating, you will receive a pair of Access key and Secret access key as below. Save these keys or download the CSV file to your computer to prepare for the next step. Configure AWS CLI\nRun the following command to configure the AWS CLI. Leave AWS Access Key ID and AWS Secret Access Key as your keys. Default region is set to ap-southeast-1 (Singapore), Default output format is json\naws configure You can check if you have configured correctly with the following command, if there are no errors then you have configured successfully.\naws s3 ls "
},
{
	"uri": "//localhost:1313/6-cloudfront-deployment/6.2-upload-static-content/",
	"title": "Static content",
	"tags": [],
	"description": "",
	"content": "Upload Copy the domain name of CloudFront distribution:\nView details of the newly created CloudFront distribution Select General tab Copy the domain name Build frontend\nOpen file simple-todo-app/frontend/.env Replace \u0026lt;distribution domain name_https\u0026gt; with the domain name you just copied (e.g. https://d5g9rzkrknce9.cloudfront.net) and update: REACT_APP_API_ENDPOINT=\u0026lt;distribution_domain_name_https\u0026gt;/api Run the following command in the simple-todo-app/frontend folder, make sure your device has NodeJS and yarn installed: yarn yarn build After running this build command successfully, you will see a build folder, open the folder to prepare for the next step. Upload static content\nWithin S3 bucket fcj-todo-bucket-1 interface click Upload Drag and drop all files in the build folder into the Files and folders section Click Upload After uploading, we will have files as shown in the image below: "
},
{
	"uri": "//localhost:1313/6-cloudfront-deployment/6.3-configure-alb-origin/",
	"title": "Configure ALB Origin",
	"tags": [],
	"description": "",
	"content": "Configure ALB Origin Within CloudFront Distribution interface: Select Origin tab Click Create origin Within Create origin interface: Select Origin domain: todo-alb Protocol: HTTP Name: todo-app-backend Click Create origin Within CloudFront Distribution interface: Select Behaviors tab Click Create behavior Within Create behavior interface: Path pattern: /api/* Origin and origin groups: todo-app-backend Viewer protocol policy: Redirect HTTP to HTTPS Allowed HTTP methods: GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE Cache key and origin requests: Cache policy: CachingDisabled Origin request policy: AllViewer Click Create behavior After successful creation, we will have behaviors as shown in the image: Access our website using CloudFront Domain name: Copy the domain name address of CloudFront distribution (e.g. https://d19141wkxl3uap.cloudfront.net) After visit this address on your browser, you will see the website interface as follows: "
},
{
	"uri": "//localhost:1313/4-database-deployment/4.3-configure-database/",
	"title": "Configure Database",
	"tags": [],
	"description": "",
	"content": "Configure Database In this step, we will create the database and necessary tables.\nOur RDS database has been configured to not allow public access to increase security, it can only be accessed by resources in the same VPC. Therefore, we will use an EC2 instance in the same VPC to connect to and query the database.\nWe need to do this step manually because the source code does not have database migrations available. In fact, we would not have to do this step if we already had database migrations.\nWithin Amazon RDS interface: Select database todo-db Scroll down, select Connectivity \u0026amp; Security tab Copy the endpoint with type Writer and save it to your text editor Access EC2: Search keyword: ec2 Select EC2 service Click Launch instance Within Launch an instance interface: Amazon Machine Image (AMI): Amazon Linux 2 AMI Create new Key pair: Key pair name: configure-db-key Key pair type: RSA Click Create key pair Network settings: VPC: todo-vpc Subnet: public-subnet-az-1 Security group: todo-ecs-sg We choose security group todo-ecs-sg because the database has been pre-configured to allow access from this security group.\nWithin EC2 interface: Select Security Groups Select todo-ecs-sg Select Actions then select Edit inbound rules Add new inbound rule with type SSH, source Anywhere-IPv4 Click Save rules Within EC2 interface: Select Instances Select newly created EC2 instance Click Connect Leave all configurations as default, click Connect Setup database: After connecting to the EC2 instance, run the following commands:\nsudo su yum update -y yum install mysql -y Replace \u0026lt;todo_db_write_endpoint\u0026gt; with the endpoint you copied and then connect to the database with the following command:\nmysql -h \u0026lt;todo_db_write_endpoint\u0026gt; -u admin -p After entering the password, we will be able to connect to the database. Run the following commands to create the necessary tables:\nCREATE DATABASE todos; USE todos; CREATE TABLE `todos` ( `id` VARCHAR(40) PRIMARY KEY, `name` VARCHAR(255) NOT NULL, `description` VARCHAR(255) NULL, `status` BOOLEAN NOT NULL DEFAULT 0 ); If no errors occur, you have successfully configured the database.\nResource cleanup Return to the EC2 interface and terminate the newly created EC2 instance Select Security Groups Select todo-ecs-sg Select Actions then select Edit inbound rules Delete the inbound rule with type SSH Click Save rules "
},
{
	"uri": "//localhost:1313/3-networking-security/3.3-internet-gateway/",
	"title": "Create Internet Gateway",
	"tags": [],
	"description": "",
	"content": "Create Internet Gateway Within VPC interface: Select Internet gateways Click on Create internet gateway Within Create internet gateway interface: Name it todo-igw Click on Create internet gateway After creating the internet gateway: Select Actions Select Attach to VPC Select todo-vpc Click on Attach internet gateway After successfully attaching the internet gateway to the VPC, the state will be Attached "
},
{
	"uri": "//localhost:1313/5-ecs-service-deployment/5.3-ecs-task-definition/",
	"title": "Create Task Definition",
	"tags": [],
	"description": "",
	"content": "Create ECS Cluster AWS Fargate is a technology that you can use with Amazon ECS to run containers without having to manage servers or clusters of Amazon EC2 instances. With AWS Fargate, you no longer have to provision, configure, or scale clusters of virtual machines to run containers. This removes the need to choose server types, decide when to scale your clusters, or optimize cluster packing.\nAccess ECS: Search keyword: ecs Select Elastic Container Service Within ECS interface: Select Clusters Click Create cluster Within Create cluster interface: Cluster name: todo-ecs-cluster Infrastructure: AWS Fargate (serverless) Click Create Create ECS Task Definition Within ECS interface:\nSelect Task definitions Click Create new task definition Select Create new task definition Within Create new task definition interface:\nTask definition family: todo-ecs-task-definion Launch type: AWS Fargate Operating system/Architecture: Depending on your Docker image architecture In this step, you need to choose the right Docker image architecture, otherwise you will not be able to deploy the ECS service. To see if your Docker image has an amd or arm architecture, run the following command: docker inspect todo:latest | grep Architecture. If the result is arm64 then select the architecture Linux/ARM64, otherwise select Linux/X86_64\nCPU: .5 vCPU\nMemory: 1GB\nTask role: todo-ecs-task-role\nTask execution role: Create new role Section Container-1:\nName: todo-app Image URI: ECR image URI Container port: 5500 Port name: todo-server-port Section Environment variables: You can get the ARN of a parameter in the Parameter Store by viewing the details of that parameter as shown in the picture: Add environment variables as shown in the table below:\nKey Value type Value DB_HOST ValueFrom ARN of parameter /todo/db-host DB_PORT ValueFrom ARN of parameter /todo/db-port DB_USER ValueFrom ARN of parameter /todo/db-user DB_PASS ValueFrom ARN of parameter /todo/db-pass DB_NAME ValueFrom ARN of parameter /todo/db-name After adding all the variables, we will get something like in the following image: After completing the configuration, click Create.\nConfigure IAM policy for ECS Task Execution Role Within ECS Task definitions interface: View details of task definition todo-ecs-task-definition Click ecsTaskExecutionRole to see details of this role Add policy for ECS Task Execution Role: Scroll down and select Add permissions Select Create inline policy Within Create policy interface: Select JSON Paste the following IAM policy into the Policy editor, replace \u0026lt;aws_account_id\u0026gt; with your AWS account ID (12 digits) then Click Next { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;ssm:GetParameters\u0026#34;, \u0026#34;kms:Decrypt\u0026#34; ], \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:ssm:ap-southeast-1:\u0026lt;aws_account_id\u0026gt;:parameter/*\u0026#34;, \u0026#34;arn:aws:kms:ap-southeast-1:\u0026lt;aws_account_id\u0026gt;:key/*\u0026#34; ] } ] } Policy name: ssm-parameter-store-read-only-region-singapore-policy Click Create policy "
},
{
	"uri": "//localhost:1313/3-networking-security/",
	"title": "Networking and Security",
	"tags": [],
	"description": "",
	"content": "Networking and Security In this section we will be building out the VPC networking components as well as security groups that will add a layer of protection around our RDS database, ECS service, Elastic Load Balancer.\nContents Create VPC Create Subnets Create Internet Gateway Create NAT Gateway Create Route Tables Create Security Groups "
},
{
	"uri": "//localhost:1313/5-ecs-service-deployment/5.4-setup-alb/",
	"title": "Create ALB",
	"tags": [],
	"description": "",
	"content": "Create ALB Access EC2: Search keyword: ec2 Select EC2 service Create Target group: Within EC2 interface, select Target group Click Create target group Within Create target group interface: Type: IP address Target group name: todo-ecs-tg Protocol: HTTP Port: 5500 VPC: todo-vpc Click Next Within Register targets interface: Click Remove Click Create target group Within EC2 interface: Select Load Balancers Click Create load balancer Click Create under Application Load Balancer Within Create load balancer interface: Load balancer name: todo-alb Scheme: Internet-facing Network mapping: VPC: todo-vpc Mappings: Select 2 public subnets public-subnet-az-1 and public-subnet-az-2 Security groups: todo-alb-sg Listeners and routing: Protocol: HTTP Port: 80 Default action: todo-ecs-tg "
},
{
	"uri": "//localhost:1313/3-networking-security/3.4-nat-gateways/",
	"title": "Create NAT Gateways",
	"tags": [],
	"description": "",
	"content": "Create NAT Gateways Within VPC interface:\nSelect NAT gateways Click on Create NAT gateway Within Create NAT gateway interface:\nName it todo-nat-gw-az-1 Select subnet public-subnet-az-1 Click on Allocate Elastic IP Click on Create NAT gateway Repeat the above steps to create another NAT gateway:\nName it todo-nat-gw-az-2 Select subnet public-subnet-az-2 Click on Allocate Elastic IP Click on Create NAT gateway After creation, we will have 2 NAT gateways as shown in the image below: "
},
{
	"uri": "//localhost:1313/4-database-deployment/4.4-parameter-store/",
	"title": "Create Parameters",
	"tags": [],
	"description": "",
	"content": "Create Parameters Access Parameter Store\nSearch keyword: parameter store Select Parameter Store Click Create parameter Create new parameter:\nName: /todo/db-host Type: SecureString Value: DB writer endpoint that you saved in the previous step Click Create parameter Create the remaining parameters Create the following parameters with Type as SecureString, replace \u0026lt;database_password\u0026gt; with your database password:\nName Value /todo/db-port 3306 /todo/db-user admin /todo/db-pass \u0026lt;database_password\u0026gt; /todo/db-name todos After creation, we will have the following parameters: "
},
{
	"uri": "//localhost:1313/4-database-deployment/",
	"title": "Database Deployment",
	"tags": [],
	"description": "",
	"content": "Database Deployment In this section we will deploy the database using the Amazon RDS service, prepare a database and create some necessary tables. In addition, we will save configuration information using the Parameter Store feature instead of saving it directly in the source code, helping to increase the security of the system and making management, change configuration data easier.\nContents Create Subnet Group Create Database Configure Database Create Parameters "
},
{
	"uri": "//localhost:1313/3-networking-security/3.5-route-tables/",
	"title": "Create Route Tables",
	"tags": [],
	"description": "",
	"content": "Create Route Tables Within VPC interface:\nSelect Route tables Click on Create route table Within Create route table interface:\nName it todo-public-rtb Select VPC todo-vpc Click on Create route table Repeat the above steps to create 2 more route tables:\ntodo-private-rtb-1 todo-private-rtb-2 After creating, we will have 3 route tables as shown in the image below: Configure routes and subnet associations The purpose of this step is to configure routing for resources located in the subnet.\nWithin Route tables interface:\nSelect todo-public-rtb Select Actions Select Edit subnet associations Within Edit subnet associations interface:\nSelect subnets: public-subnet-az-1 and public-subnet-az-2 Click on Save associations Within Route tables interface:\nSelect todo-public-rtb Select Actions Select Edit routes Within Edit routes interface:\nClick on Add route Add a route with the following configuration: Destination: 0.0.0.0/0 Target: Internet Gateway \u0026gt; todo-igw Click on Save changes Repeat the above steps with todo-private-rtb-1 and todo-private-rtb-2, configuring as below:\nRoute table Subnet associations Route todo-private-rtb-1 private-subnet-az-1 0.0.0.0/0: NAT Gateway \u0026gt; todo-nat-gw-az-1 todo-private-rtb-2 private-subnet-az-2 0.0.0.0/0: NAT Gateway \u0026gt; todo-nat-gw-az-2 Configure route for todo-private-rtb-1 Configure route for todo-private-rtb-2 Check configuration\nWe can check whether the route table configuration is correct by looking at its detail "
},
{
	"uri": "//localhost:1313/5-ecs-service-deployment/5.5-deploy-ecs-service/",
	"title": "Deploy ECS Service",
	"tags": [],
	"description": "",
	"content": "Deploy ECS Service Within todo-ecs-cluster interface:\nSelect Services tab Click Create Within Create service interface:\nEnvironment: Compute options: Launch type Application type: Service Task definition: Family: todo-ecs-task-definition Service name: todo-ecs-service Service type: Replica Desired tasks: 2 VPC: todo-vpc Subnets: private-subnet-az-1 and private-subnet-az-2 Security group: Use an existing security group Select todo-ecs-sg Load balancing: Load balancer type: Application Load Balancer Container: todo-app 5500:5500 Load balancer: Select Use an existing security group then select todo-alb Health check grace period: 10 Listener: Select Use an existing listener then select 80:HTTP Target group: Select Use an existing target group then select todo-ecs-tg Service auto scaling: Select Use service auto scaling Minimum number of tasks: 1 Maximum number of tasks: 3 Scaling policy type: Target tracking Policy name: avg-cpu-scaling-policy ECS service metric: ECSServiceAverageCPUUtilization Target value: 70 Leave other configurations as default and then click Create. Access ECS service:\nAfter deployment is complete, the ECS service will have a status as shown in the image below: Return to the Load balancers interface and copy the DNS name of todo-alb: Access this address in your browser and you will see the following result:\n{\u0026#34;message\u0026#34;:\u0026#34;Welcome to the Todo API\u0026#34;} "
},
{
	"uri": "//localhost:1313/5-ecs-service-deployment/",
	"title": "ECS Service",
	"tags": [],
	"description": "",
	"content": "ECS Service In this section we will deploy the database using the Amazon RDS service, prepare a database and create the necessary tables. In addition, we will save configuration information using the Parameter Store function instead of saving it directly in the source code, helping to increase the security of the system and making management easier.\nContents Create ECR Repository Create IAM Role Create Task Definition Create ALB Deploy ECS Service "
},
{
	"uri": "//localhost:1313/6-cloudfront-deployment/",
	"title": "CloudFront",
	"tags": [],
	"description": "",
	"content": "CloudFront In this section, we will deploy CloudFront to cache static website content to significantly reduce page load time and configure Cache behavior to direct requests to the correct target frontend or backend.\nContents Create Distribution Static content Configure ALB Origin "
},
{
	"uri": "//localhost:1313/3-networking-security/3.6-security-groups/",
	"title": "Create Security Groups",
	"tags": [],
	"description": "",
	"content": "Create Security Groups Within VPC interface: Select Security groups Click on Create security group Within Create security group interface: Security group name: todo-alb-sg Description: Allows HTTP access to ALB VPC: todo-vpc In the Inbound rules configuration section, add a new rule as follows and then click Create security group Type: HTTP Source: Anywhere-IPv4 Create additional security groups with the following configuration: Security group name: todo-ecs-sg Description: Allows ALB access to ECS service VPC: todo-vpc Inbound rule: Type: Custom TCP Port: 5500 Source: todo-alb-sg The port number is 5500 and not another number because the backend container runs on port 5500. We will configure it in the next steps.\nSecurity group name: todo-db-sg Description: Allows RDS access to ECS service VPC: todo-vpc Inbound rule: Type: MySQL/Aurora Source: todo-ecs-sg "
},
{
	"uri": "//localhost:1313/7-route53/",
	"title": "Route 53 (Optional)",
	"tags": [],
	"description": "",
	"content": "Route 53 In this section, we will configure the domain name for the website by Route 53 service instead of using CloudFront\u0026rsquo;s default domain.\nYou need a domain name to do this step.\nContents Create Hosted Zone Alternate Domain Name "
},
{
	"uri": "//localhost:1313/8-cleanup/",
	"title": "Clean Up",
	"tags": [],
	"description": "",
	"content": "Resource Clean Up RDS: Delete RDS database (delete each instance before deleting the database) Delete database subnet group Parameter Store: Delete parameters Route 53: Delete all records of the Hosted zone (except 2 default records) Delete hosted zone CloudFront: Disable CloudFront distribution Delete CloudFront distribution ACM: Delete the SSL/TLS certificate in region us-east-1 S3: Empty S3 bucket Delete S3 bucket EC2: Delete Load balancer Delete Target group ECR: Delete ECR repository ECS: Delete ECS service Delete ECS cluster Delete task definition VPC: Delete NAT gateways Delete Elastic IPs Delete VPC CloudWatch: Delete CloudWatch log groups IAM: Delete roles: todo-ecs-task-role và ecsTaskExecutionRole Delete IAM access key "
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]